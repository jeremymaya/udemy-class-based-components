{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAIMA,G,MAAe,CACjBC,OAAQ,CACJC,KAAM,sBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,sBACNC,SAAU,eA2BHE,EAdO,SAAAC,GAClB,IAVeC,EAAKC,EAUdC,GAVSF,EAUUD,EAAMC,KAVXC,GAUgB,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAIL,EAGAP,EAAaS,GAAhCP,EAHmB,EAGnBA,KAAMC,EAHa,EAGbA,SAEd,OACI,sBAAKS,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC/BlBU,EAAU,SAAAP,GACZ,OACI,qBAAKM,UAAU,mBAAf,SACI,qBAAKA,UAAU,qBAAf,SACKN,EAAMQ,aAOvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCETG,E,4MAYFC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAGd,IAAD,OAMhBC,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAAQ,OAAK,EAAKC,SAAS,CAACjB,IAAKgB,EAASE,OAAOC,cACjD,SAAAC,GAAG,OAAI,EAAKH,SAAS,CAACN,aAAcS,EAAIb,e,+BAM5C,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAChC,0CAAaqB,KAAKX,MAAMC,iBAG9BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAChC,cAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAGnC,cAAC,EAAD,CAASO,QAAQ,yC,GArCde,IAAMC,WAyCxBC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.78454cdd.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\n// configuration object\nconst seasonConfig = {\n    summer: {\n        text: 'Let\\'s hit the beach',\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'Burr, it is chilly!',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    }\n    else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n}\n\nconst SeasonDisplay = props => {\n    const season = getSeason(props.lat, new Date().getMonth());\n    // accesses the correct season object from seasonConfig using the key value const season\n    const { text, iconName } = seasonConfig[season];\n\n    return (\n        <div className={`season-display ${season}`}>\n            <i className={`icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={`icon-right massive ${iconName} icon`} />\n        </div>\n    )\n};\n\nexport default SeasonDisplay;","import React from 'react';\n\nconst Spinner = props => {\n    return (\n        <div className=\"ui active dimmer\">\n            <div className=\"ui big text loader\">\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\n// same as writing {props.message || 'Loading...'} but more elegant way\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\n// Functional Component based\n// const App = () => {\n//     window.navigator.geolocation.getCurrentPosition(\n//         // two function callbacks\n//         // 1. success callback\n//         // 2. failure callback\n//         position => console.log(position),\n//         err => console.log(err)\n//     )\n\n//     return <div>Latitude: </div>;\n// }\n\n// Class Component based\nclass App extends React.Component {\n    // // initialized the state by using a constructor function\n    // // constructor function now has a single purpose - initializing the state object \n    // constructor(props) {\n    //     // super() references the parent constructor function for React.Component\n    //     super(props);\n\n    //     // this is ONLY TIME we do direct assignment to this.state\n    //     this.state = { lat: null, errorMessage: '' };\n    // }\n\n    // equivalent to the previous constructor function\n    state = { lat: null, errorMessage: '' };\n\n    // avoid data-loading in the constructor function\n    componentDidMount() {\n        // render method gets called often\n        // saves resources and load time by moving the getCurrentPosition outside of the the render()\n        // using setState to update the state\n        // this.state.lat = position.coords.latitude is INVALID\n        // this runs sometime in future NOT when the constructor function runs\n        window.navigator.geolocation.getCurrentPosition(\n            position =>  this.setState({lat: position.coords.latitude}),\n            err => this.setState({errorMessage: err.message})\n        )\n    }\n\n    // render() is required by React\n    render() {\n        if (this.state.errorMessage && !this.state.lat){\n            return <div>Error: {this.state.errorMessage}</div>;\n        }\n\n        if (!this.state.errorMessage && this.state.lat){\n            return <SeasonDisplay lat={this.state.lat}/>;\n        }\n\n        return <Spinner message=\"Please allow location request...\"/>;\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.querySelector('#root')\n);"],"sourceRoot":""}